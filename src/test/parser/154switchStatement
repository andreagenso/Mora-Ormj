/* PRUEBAS DE STATEMENT */

// ENTRANDO POR METHODDECLARATION -> STATEMENT -> SWITCHSTATEMENT

// StatementWithoutTrailingSubstatement
	// Block -> SwitchStatement 
/* 
// SwitchStatement
class ReprChange implements AAA,adadad,asdad {	
	// methodDeclaration -> methodModifiers TypeParameters opt
	public <AAA,BBB> void  Metodo(){
		switch( a + b > c - d) {
		case 1+6:
			a++;
		case 2+8:
			a--;
		case a:
			a=0;
		case c:
		case d:
		default:
			a=0;
		}
	}
}
*/

class ReprChange implements AAA,adadad,asdad {	
	// methodDeclaration -> methodModifiers TypeParameters opt
	public <AAA,BBB> void  Metodo(){
		enum EstadoCivil {soltero, casado, divorciado};
		EstadoCivil ec = EstadoCivil.casado;
		ec = EstadoCivil.soltero;
		switch(ec)
		{
			case soltero:	System.out.println("Es soltero");
					break;
			case casado:	System.out.println("Es casado");
					break;
			case divorciado:System.out.println("Es divorciado");
					break;
			case aa:
			case bb:
			default:
				break;
		 }
	}
}
/*



// SynchronizedStatement
class ReprChange implements AAA,adadad,asdad {	
	public <AAA,BBB> void  Metodo(){
		synchronized (a>5 && boolean.class) { a=45;} 
		synchronized (a>5 && boolean.class) { a=45;
			Vector<String> v = new Vector<String>();
			for(String cadena: v)
			System.out.println (cadena);	
		} 
		
	}
}

// ThrowStatement
class ReprChange implements AAA,adadad,asdad {	
	public <AAA,BBB> void  Metodo(){
		synchronized (a>5 && boolean.class) { a=45;} 
		synchronized (a>5 && boolean.class) { a=45;
			Vector<String> v = new Vector<String>();
			for(String cadena: v)
			System.out.println (cadena);
			throw 23+6;
			throw a;
			throw byte.class;
		} 		
	}
}

// TryStatement
class ReprChange implements AAA,adadad,asdad {	
	public <AAA,BBB> void  Metodo(){
			
			int valor;
			try {
			     for( x=0,valor = 100; x < 100; x ++ )
			        valor /= x;
			    }
			catch( ArithmeticException e) {
				System.out.println("Matematicas locas");
			}
			catch( Exception e ) {
			System.out.println("Se ha producido un error" );
			}
	}
}

class ReprChange implements AAA,adadad,asdad {	
	public <AAA,BBB> void  Metodo(){
			
			int valor;
			 try {
		        if( temp > 40 )
		            throw( new demasiadoCalor() );
		        if( dormir < 8 )
		        	a = 8;
		            // throw( new demasiado Cansado() );
		    	} catch( Limites lim ) {
		        if( lim instanceof demasiadoCalor ) {
		            System.out.println( "Capturada excesivo calor!" );
		            return;
		            }
		        if( lim instanceof demasiadoCansado ) {
		            System.out.println( "Capturada excesivo cansancio!" );
		            return;
		            }
				} finally
				// System.out.println( "En la clausula finally" );
		        {System.out.println( "En la clausula finally" );}			
	}
}
*/