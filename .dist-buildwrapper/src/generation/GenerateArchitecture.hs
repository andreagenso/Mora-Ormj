-- do not edit; automatically generated by UU.AG
module GenerateArchitecture where

import System.Directory
-- Architecture ------------------------------------------------
type Architecture = [(Dirs)]
-- semantic domain
type T_Architecture = (String) ->
                      ( (String),(IO ()),( IO()),(IO()))
-- cata
sem_Architecture :: (Architecture) ->
                    (T_Architecture)
sem_Architecture (list) =
    (Prelude.foldr (sem_Architecture_Cons) (sem_Architecture_Nil) ((Prelude.map sem_Dirs list)))
sem_Architecture_Cons :: (T_Dirs) ->
                         (T_Architecture) ->
                         (T_Architecture)
sem_Architecture_Cons (hd_) (tl_) =
    \ _lhsIdir ->
        let _lhsOdir :: (String)
            _lhsOdirCreados :: (IO ())
            _lhsOout :: ( IO())
            _lhsOproyecto :: (IO())
            _hdIdir :: (String)
            _hdIdirCreados :: (IO ())
            _hdIout :: ( IO())
            _hdOdir :: (String)
            _tlIdir :: (String)
            _tlIdirCreados :: (IO ())
            _tlIout :: ( IO())
            _tlIproyecto :: (IO())
            _tlOdir :: (String)
            ( _hdIdir,_hdIdirCreados,_hdIout) =
                (hd_ (_hdOdir))
            ( _tlIdir,_tlIdirCreados,_tlIout,_tlIproyecto) =
                (tl_ (_tlOdir))
            (_lhsOproyecto@_) =
                      do
                putStrLn ("Creando el proyecto...")
                d <- (doesDirectoryExist _lhsIdir)
                (if d then (print "modificando el proyecto..." ) else (print "modificando el proyecto..."))
                putStrLn ("Proyecto modificado ... ")
            (_lhsOdir@_) =
                _dirarch
            (_tlOdir@_) =
                _dirarch
            (_dirarch@_) =
                _lhsIdir
            (_lhsOdirCreados@_) =
                _tlIdirCreados
            (_lhsOout@_) =
                do
                putStrLn ("Creando la arquitectura...")
                _hdIdirCreados >> _tlIout
            (_hdOdir@_) =
                _lhsIdir
        in  ( _lhsOdir,_lhsOdirCreados,_lhsOout,_lhsOproyecto)
sem_Architecture_Nil :: (T_Architecture)
sem_Architecture_Nil  =
    \ _lhsIdir ->
        let _lhsOdir :: (String)
            _lhsOdirCreados :: (IO ())
            _lhsOout :: ( IO())
            _lhsOproyecto :: (IO())
            (_lhsOproyecto@_) =
                     do
                putStrLn ("No hay proyecto")
            (_lhsOdirCreados@_) =
                return()
            (_lhsOout@_) =
                do
                putStrLn ("Fin de la creacion de directorios")
            (_lhsOdir@_) =
                _lhsIdir
        in  ( _lhsOdir,_lhsOdirCreados,_lhsOout,_lhsOproyecto)
-- Dirs --------------------------------------------------------
type Dirs = [(String)]
-- semantic domain
type T_Dirs = (String) ->
              ( (String),(IO ()),( IO()))
-- cata
sem_Dirs :: (Dirs) ->
            (T_Dirs)
sem_Dirs (list) =
    (Prelude.foldr (sem_Dirs_Cons) (sem_Dirs_Nil) (list))
sem_Dirs_Cons :: (String) ->
                 (T_Dirs) ->
                 (T_Dirs)
sem_Dirs_Cons (hd_) (tl_) =
    \ _lhsIdir ->
        let _lhsOdir :: (String)
            _lhsOdirCreados :: (IO ())
            _lhsOout :: ( IO())
            _tlIdir :: (String)
            _tlIdirCreados :: (IO ())
            _tlIout :: ( IO())
            _tlOdir :: (String)
            ( _tlIdir,_tlIdirCreados,_tlIout) =
                (tl_ (_tlOdir))
            (_lhsOdir@_) =
                _tlIdir
            (_tlOdir@_) =
                _dir
            (_dir@_) =
                _lhsIdir ++ hd_ ++ "/"
            (_lhsOdirCreados@_) =
                (do
                print "Creando directorio :"
                d <- (doesDirectoryExist _dir)
                if d then (print "Modificando el Dir..." ) else (createDirectory _dir)
                )
                >> _tlIdirCreados
            (_lhsOout@_) =
                _tlIdirCreados >> _tlIout
        in  ( _lhsOdir,_lhsOdirCreados,_lhsOout)
sem_Dirs_Nil :: (T_Dirs)
sem_Dirs_Nil  =
    \ _lhsIdir ->
        let _lhsOdir :: (String)
            _lhsOdirCreados :: (IO ())
            _lhsOout :: ( IO())
            (_lhsOdirCreados@_) =
                return()
            (_lhsOout@_) =
                do
                putStrLn ("Fin de la creacion del dirs")
            (_lhsOdir@_) =
                _lhsIdir
        in  ( _lhsOdir,_lhsOdirCreados,_lhsOout)
-- Project -----------------------------------------------------
data Project = Project (Dirs) (Architecture)
             deriving ( Show)
-- semantic domain
type T_Project = ( ( IO()))
-- cata
sem_Project :: (Project) ->
               (T_Project)
sem_Project ((Project (_nameProject) (_arch))) =
    (sem_Project_Project ((sem_Dirs (_nameProject))) ((sem_Architecture (_arch))))
sem_Project_Project :: (T_Dirs) ->
                       (T_Architecture) ->
                       (T_Project)
sem_Project_Project (nameProject_) (arch_) =
    let _lhsOout :: ( IO())
        _nameProjectIdir :: (String)
        _nameProjectIdirCreados :: (IO ())
        _nameProjectIout :: ( IO())
        _nameProjectOdir :: (String)
        _archIdir :: (String)
        _archIdirCreados :: (IO ())
        _archIout :: ( IO())
        _archIproyecto :: (IO())
        _archOdir :: (String)
        ( _nameProjectIdir,_nameProjectIdirCreados,_nameProjectIout) =
            (nameProject_ (_nameProjectOdir))
        ( _archIdir,_archIdirCreados,_archIout,_archIproyecto) =
            (arch_ (_archOdir))
        (_archOdir@_) =
            _nameProjectIdir
        (_nameProjectOdir@_) =
            ""
        (_lhsOout@_) =
            (_nameProjectIdirCreados) >> (_archIproyecto >> _archIout) >> (print "se ha creado la arquitectura externa del proyeto :") >> (print _nameProjectIdir)
    in  ( _lhsOout)


